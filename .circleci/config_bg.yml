# This CircleCI configuration creates a basic blue/green deployment.
# A deployment (green) is created and checked, and if the check is passed public routes and services are switched from the previous deployment (blue)

version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  node: circleci/node@4.7
  docker: circleci/docker@2.0.2
  kubernetes: circleci/kubernetes@0.3.0
  redhat-openshift: circleci/redhat-openshift@0.2.0

# Define custom jobs for this config
# See: https://circleci.com/docs/2.0/jobs-steps/
jobs:
  deploy-to-cluster:
    executor: redhat-openshift/default
    steps:
      - redhat-openshift/login-and-update-kubeconfig:
          insecure-skip-tls-verify: true
          openshift-platform-version: 4.x
          token: $OPENSHIFT_TOKEN
          server-address: $OPENSHIFT_SERVER
      - run:
          command: >
            oc project $OPENSHIFT_PROJECT
          name: Set active OpenShift project/namespace
      # Otherwise will use default project 
      - run:
          # Delete existing docker secret if it exists (We don't mind recreating it as the details may have changed)
          command: >
            oc delete secret my-docker-registry-secret
          name: Delete existing secret
      - run:
          # https://docs.openshift.com/container-platform/4.6/openshift_images/managing_images/using-image-pull-secrets.html#images-allow-pods-to-reference-images-from-secure-registries_using-image-pull-secrets
          command: >
            oc create secret docker-registry 
            --docker-server=$DOCKER_SERVER 
            --docker-username=$DOCKER_LOGIN 
            --docker-password=$DOCKER_PASSWORD 
            --docker-email=unused
            my-docker-registry-secret
          name: Create Docker secret
      - run:
          # https://docs.openshift.com/container-platform/4.6/openshift_images/managing_images/using-image-pull-secrets.html#images-allow-pods-to-reference-images-from-secure-registries_using-image-pull-secrets
          command: >
            oc secrets link default my-docker-registry-secret --for=pull
          name: Add secret to service account
      # Create new deployment configuration for the green deployment
      # $CIRCLE_SHA1 is the SHA1 hash of the last commit of the current build
      - run:
          command: |
            cat \<<- EOF > deployment.yml
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: my-nodejs-deployment-$CIRCLE_SHA1
            spec:
              selector:
                matchLabels:
                  app: my-nodejs-app-$CIRCLE_SHA1
              replicas: 2
              # Uncomment to change update strategy
              # strategy:
              #   type: Recreate
              template:
                metadata:
                  labels:
                    app: my-nodejs-app-$CIRCLE_SHA1
                spec:
                  # Uncomment this to specify which nodes to deploy to
                  # nodeSelector:
                  #   region: west
                  containers:
                  - image: $DOCKER_REPO:$DOCKER_IMAGE_NAME
                    name: my-nodejs-app-$CIRCLE_SHA1
                    ports:
                    - containerPort: 3000
                    readinessProbe: 
                      httpGet: 
                        scheme: HTTP
                        path: /
                        port: 3000 
            EOF
          name: Create example k8s deployment yml file
      # Create and deploy the resources defined for the green deployment
      # Due to the use of $CIRCLE_SHA1, each deployment will have a unique name which we can use to update the services/routes if deployment succeeds
      - kubernetes/create-or-update-resource:
          get-rollout-status: true
          resource-file-path: deployment.yml
          resource-name: deployment/my-nodejs-deployment-$CIRCLE_SHA1
      # Before updating the routes/services to point to the new deployment, ensure it has available pods
      # This is done using a Bash one-liner which feeds the output of 'oc get deployment' to awk - which extracts the number of available pods
      # This information appears in the 4th column on the second row of the oc command output
      # If the number of available pods is less than 1, an exit code of 1 is returned which will tell CCI to abort the workflow
      - run:
          command: >
            oc get deployment my-nodejs-deployment-$CIRCLE_SHA1 | awk 'FNR == 2 {print $4}' | if [ $(</dev/stdin) -lt 1 ]; then exit 1; fi
          name: Check health of new deployment
      # If the above command has completed successfully, pods are available in the green deployment
      # Services and routes can now be safely updated to point to the new deployment instead of the previous (blue) deployment
      - run:
          command: |
            cat \<<- EOF > service.yml
            apiVersion: v1
            kind: Service
            metadata:
              name: my-nodejs-app-service
            spec:
              selector:
                app: my-nodejs-app-$CIRCLE_SHA1
              ports:
                - port: 3000
                  targetPort: 3000
            EOF
          name: Create example OpenShift service yml file
      - run:
          command: |
            cat \<<- EOF > route.yml
            apiVersion: route.openshift.io/v1
            kind: Route
            metadata:
              name: my-nodejs-app-route
            spec:
              to:
                kind: Service
                name: my-nodejs-app-service
              port:
                targetPort: 3000
            EOF
          name: Create example OpenShift route yml file
      - run:
          command: >
            oc apply -f service.yml
          name: Apply service.yml
      - run:
          command: >
            oc apply -f route.yml
          name: Apply route.yml

      # Old and failed deployments are not automatically deprovisions so that a post-mortem can be performed if any errors have occured

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  test-image-deploy: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - node/test:
          # This is the node version to use for the `cimg/node` tag
          # Relevant tags can be found on the CircleCI Developer Hub
          # https://circleci.com/developer/images/image/cimg/node
          version: '16.10'
          # If you are using yarn, change the line below from "npm" to "yarn"
          pkg-manager: npm
      
      - docker/publish:
          registry: $DOCKER_SERVER
          image: $DOCKER_REPO
          tag: $DOCKER_IMAGE_NAME,$CIRCLE_SHA1 # tag with $DOCKER_IMAGE_NAME and the circle CI unique SHA1
          use-docker-credentials-store: false  # env variables should be used instead, named $DOCKER_LOGIN and $DOCKER_PASSWORD
          requires:
            - node/test # Only deploy once the build job has completed
          filters:
            branches:
              only: main # Only deploy on the main branch

      - deploy-to-cluster:
          requires:
           - docker/publish # Only deploy once the image has been published